{"version":3,"file":"static/js/884.6a4177e1.chunk.js","mappings":"oIACA,IADgB,kC,0HCKVA,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IACZC,GAAUD,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAqFrB,UAnFqB,WAAO,IAAD,IACjBE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAkBpD,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,+GAECC,MAAM,uCAAD,OACab,EADb,oBACgCc,EAAAA,IAHtC,cAEhBC,EAFgB,gBAKHA,EAASC,OALN,OAKhBC,EALgB,OAMtBb,EAASa,GANa,kDAQtBC,QAAQC,IAAI,gCAAZ,MARsB,0DAAH,qDAYvBP,GACD,GAAE,CAACZ,IAECG,GAKH,4BACE,SAAC,KAAD,CAAMiB,GAAIb,EAAac,QAAvB,SAAgC,mBACrB,OAAVlB,IACC,4BACE,4BACE,0BACE,gBACEmB,IAAG,0CAAqCnB,EAAMoB,eAC9CC,IAAKrB,EAAMsB,WAGf,4BACE,wBAAKtB,EAAMsB,SACX,yBAAG,eAAatB,EAAMuB,aAAa,QACnC,wBAAI,cACJ,uBAAIvB,EAAMwB,YACV,wBAAI,YACJ,uBAAIxB,EAAMyB,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,eAGnD,4BACE,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CAAMZ,GAAE,kBAAapB,EAAb,SAAR,SAAqC,YAEvC,yBACE,SAAC,KAAD,CAAMoB,GAAE,kBAAapB,EAAb,YAAR,SAAwC,wBAMlD,UAAC,EAAAiC,SAAD,CACEC,UACE,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CAAC,EACfC,aAAa,0BACbC,WAAW,UACXC,MAAM,YAVZ,WAcE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,OAAOC,SAAS,SAAC/C,EAAD,OAC5B,SAAC,KAAD,CAAO8C,KAAK,UAAUC,SAAS,SAAC7C,EAAD,SACvB,WAtDP,yBAAK,cA0Df,C,sBCzFD,SAAS8C,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/config.jsx","pages/MovieDetails.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const API_KEY = 'a9909d47681c6b09be18c529deedffef';\nexport default API_KEY;\n","import { Suspense, lazy, useEffect, useRef, useState } from 'react';\nimport { useParams, Link, Routes, Route, useLocation } from 'react-router-dom';\nimport API_KEY from 'components/config';\nimport { MagnifyingGlass } from 'react-loader-spinner';\n\nconst Cast = lazy(() => import('./Cast'));\nconst Reviews = lazy(() => import('./Reviews'));\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await fetch(\n          `https://api.themoviedb.org/3//movie/${movieId}?api_key=${API_KEY}`\n        );\n        const data = await response.json();\n        setMovie(data);\n      } catch (error) {\n        console.log('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (!movie) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <Link to={backLinkHref.current}>&larr; Go back</Link>\n      {movie !== null && (\n        <div>\n          <div>\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${movie.backdrop_path}`}\n                alt={movie.title}\n              />\n            </div>\n            <div>\n              <h1>{movie.title}</h1>\n              <p>User Score: {movie.vote_average}%</p>\n              <h2>Overview</h2>\n              <p>{movie.overview}</p>\n              <h2>Genres</h2>\n              <p>{movie.genres.map(genre => genre.name).join(', ')}</p>\n            </div>\n          </div>\n          <div>\n            <h3>Additional information</h3>\n            <ul>\n              <li>\n                <Link to={`/movies/${movieId}/cast`}>Cast</Link>\n              </li>\n              <li>\n                <Link to={`/movies/${movieId}/reviews`}>Reviews</Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      )}\n      <Suspense\n        fallback={\n          <MagnifyingGlass\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"MagnifyingGlass-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"MagnifyingGlass-wrapper\"\n            glassColor=\"#c0efff\"\n            color=\"#e15b64\"\n          />\n        }\n      >\n        <Routes>\n          <Route path=\"cast\" element={<Cast />} />\n          <Route path=\"reviews\" element={<Reviews />} />\n        </Routes>{' '}\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Cast","lazy","Reviews","movieId","useParams","useState","movie","setMovie","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovieDetails","fetch","API_KEY","response","json","data","console","log","to","current","src","backdrop_path","alt","title","vote_average","overview","genres","map","genre","name","join","Suspense","fallback","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","glassColor","color","path","element","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}